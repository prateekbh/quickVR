<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Connecting up Google Cardboard to web APIs</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <style>
      body {
        margin: 0px;
        overflow: hidden;
      }
      #webglviewer {
        bottom: 0;
        left: 0;
        position: absolute;
        right: 0;
        top: 0;
      }
    </style>
  </head>
  <body>
    <div id="webglviewer"></div>

    <script src="/public/javascripts/js/three.min.js"></script>
    <script src="/public/javascripts/js/StereoEffect.js"></script>
    <script src="/public/javascripts/js/DeviceOrientationControls.js"></script>
    <script src="/public/javascripts/js/OrbitControls.js"></script>
    <script src="/public/javascripts/js/helvetiker_regular.typeface.js"></script>
    <script src="/public/javascripts/js/ShelfManager.js"></script>
    <script src="https://timezonedb.googlecode.com/files/timezonedb.js" type="text/javascript"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/zepto/1.1.6/zepto.min.js"></script>

    <script>
      var scene,
          camera, 
          renderer,
          element,
          container,
          effect,
          controls,
          clock,
          forwardTilted,
          backwardTilted,
          leftTilted,
          rightTilted,
          y=0;
      var light,camera;


      var shelves={};

      init();

      function init() {
        scene = new THREE.Scene();
        camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.001, 700);
        camera.position.set(0, 50, 170);
        scene.add(camera);

        renderer = new THREE.WebGLRenderer();
        renderer.setSize( window.innerWidth, window.innerHeight );
        element = renderer.domElement;
        container = document.getElementById('webglviewer');
        container.appendChild(element);

        effect = new THREE.StereoEffect(renderer);

        window.ondeviceorientation=callback;

        
        var z=0;
        var light = new THREE.AmbientLight( 0xcccccc ); // soft white light
        scene.add( light );

        var floorTexture = THREE.ImageUtils.loadTexture('/public/images/wood.jpg');
        floorTexture.wrapS = THREE.RepeatWrapping;
        floorTexture.wrapT = THREE.RepeatWrapping;
        floorTexture.repeat = new THREE.Vector2(5000, 5000);
        floorTexture.anisotropy = renderer.getMaxAnisotropy();

        var floorMaterial = new THREE.MeshPhongMaterial({
          color: 0xffffff,
          specular: 0xffffff,
          shininess: 20,
          shading: THREE.FlatShading,
          map: floorTexture
        });

        var geometry = new THREE.PlaneBufferGeometry(100000, 100000);

        var floor = new THREE.Mesh(geometry, floorMaterial);
        floor.rotation.x = -Math.PI / 2;
        scene.add(floor);


        clock = new THREE.Clock();

        animate();
        

        window.onkeydown=function(e){
          if(e.keyCode==38){
            moveForward();
          }
          else if(e.keyCode==40){
            moveBackward();
          }
          else if (e.keyCode == 37) {   // left arrow key
            camera.rotation.y = camera.rotation.y + (5 * (Math.PI / 180));
          }
          else if (e.keyCode == 39) {   // right arrow key
            camera.rotation.y = camera.rotation.y - (5 * (Math.PI / 180));
          }
        }

        $.get("/api/browse?cid=beverages&pno=1",function(data){
          ShelfManager.makeShelf("beverages",data);
        });

        
      }

      function callback(event){
        //console.log("orientation gamma:", event.gamma, "beta", event.beta, "alpha", event.alpha);
        var threshold = 10;
        if(event.gamma > threshold) {
          moveForward()
          if(forwardTilted == 1) {
            // do nothing
          }
          else {
            forwardTilted = 1;
          }
        }
        else if(forwardTilted == 1) {
          forwardTilted = 0;
        }
        if(event.gamma < -threshold) {
          moveBackward()
          if(backwardTilted == 1) {
            // do nothing
          }
          else {
            backwardTilted = 1;
          }
        }
        else if(backwardTilted == 1) {
          backwardTilted = 0;
        }
        if(event.beta > threshold) {
          if(rightTilted == 1) {
            // do nothing
          }
          else {
            console.log("Right Tilt");
            rightTilted = 1;
          }
        }
        else if(rightTilted == 1) {
          rightTilted = 0;
        }
        if(event.beta < -threshold) {
          if(leftTilted == 1) {
            // do nothing
          }
          else {
            console.log("Left Tilt");
            leftTilted = 1;
          }
        }
        else if(leftTilted == 1) {
          leftTilted = 0;
        }
      }

      function moveForward() {
        camera.translateZ(-10);
        var index=Math.ceil(camera.position.x/150);
        if(index>0){
          var category=ShelfManager.shelves.categories[index-1];
          var shelf=ShelfManager.shelves[category];
          var spaceLeft=(Math.round(camera.position.z)-shelf.endZ);
          if(spaceLeft<60&&spaceLeft>50){
            $.get("/api/browse?cid="+shelf.category+"&pno="+((shelf.products.length/10)+1),function(data){
              ShelfManager.makeShelf(shelf.category,data);
            });
          }
        }
        

      }

      function moveBackward() {
        camera.translateZ(10);
      }
      
      function animate() {
        requestAnimationFrame(animate);
        update(clock.getDelta());
        render(clock.getDelta());
      }

      function resize() {
        var width = container.offsetWidth;
        var height = container.offsetHeight;

        // camera.aspect = width / height;
        // camera.updateProjectionMatrix();

        // renderer.setSize(width, height);
        effect.setSize(width, height);
      }

      function update(dt) {
        resize();
      }

      function render(dt) {
        effect.render(scene, camera);
      }

    </script>
  </body>
</html>
